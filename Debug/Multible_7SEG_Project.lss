
Multible_7SEG_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c61  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a5  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000572  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ce  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e2  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  7a:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Init>:
 PORTB_BASE_ADDRESS,
 PORTC_BASE_ADDRESS,
 PORTD_BASE_ADDRESS};

DIO_CheckType DIO_Init(void)
 {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
     unsigned char Loop;
     DIO_CheckType Result;
     for(Loop = (unsigned char)0; Loop < DIO_NUM_OF_CHANNELS; Loop++)
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	30 c0       	rjmp	.+96     	; 0xea <DIO_Init+0x68>
     {
         unsigned char PortId;
         /*read the port Id from link time configuration*/
         PortId = DIO_ConfigParam[Loop].PortId;
  8a:	e3 2f       	mov	r30, r19
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	df 01       	movw	r26, r30
  90:	aa 0f       	add	r26, r26
  92:	bb 1f       	adc	r27, r27
  94:	aa 0f       	add	r26, r26
  96:	bb 1f       	adc	r27, r27
  98:	ac 59       	subi	r26, 0x9C	; 156
  9a:	bf 4f       	sbci	r27, 0xFF	; 255
  9c:	ac 91       	ld	r26, X
         /*verify Port Id*/
         if(PortId < NUM_OF_PORTS)
  9e:	a4 30       	cpi	r26, 0x04	; 4
  a0:	40 f5       	brcc	.+80     	; 0xf2 <DIO_Init+0x70>
         {
             /*init port direction for the masked pins*/
             DDR_REG(PortId) &= ~(DIO_ConfigParam[Loop].PortMask);
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	a0 5a       	subi	r26, 0xA0	; 160
  a6:	bf 4f       	sbci	r27, 0xFF	; 255
  a8:	cc 91       	ld	r28, X
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	9e 91       	ld	r25, -X
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	ee 0f       	add	r30, r30
  b6:	ff 1f       	adc	r31, r31
  b8:	ec 59       	subi	r30, 0x9C	; 156
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	81 81       	ldd	r24, Z+1	; 0x01
  be:	28 2f       	mov	r18, r24
  c0:	20 95       	com	r18
  c2:	92 23       	and	r25, r18
  c4:	9c 93       	st	X, r25
             DDR_REG(PortId) |=  DIO_ConfigParam[Loop].PortMask & DIO_ConfigParam[Loop].PortDirection;
  c6:	4c 91       	ld	r20, X
  c8:	92 81       	ldd	r25, Z+2	; 0x02
  ca:	58 2f       	mov	r21, r24
  cc:	59 23       	and	r21, r25
  ce:	45 2b       	or	r20, r21
  d0:	4c 93       	st	X, r20
             /*init pull up resistor in case of input direction only*/
             PORT_REG(PortId) &= (~(DIO_ConfigParam[Loop].PortMask)) | (DIO_ConfigParam[Loop].PortDirection);
  d2:	48 81       	ld	r20, Y
  d4:	29 2b       	or	r18, r25
  d6:	24 23       	and	r18, r20
  d8:	28 83       	st	Y, r18
             PORT_REG(PortId) |= DIO_ConfigParam[Loop].PortMask & ((~DIO_ConfigParam[Loop].PortDirection) & DIO_ConfigParam[Loop].IsPullupResistorUsed);
  da:	28 81       	ld	r18, Y
  dc:	43 81       	ldd	r20, Z+3	; 0x03
  de:	90 95       	com	r25
  e0:	94 23       	and	r25, r20
  e2:	89 23       	and	r24, r25
  e4:	82 2b       	or	r24, r18
  e6:	88 83       	st	Y, r24

DIO_CheckType DIO_Init(void)
 {
     unsigned char Loop;
     DIO_CheckType Result;
     for(Loop = (unsigned char)0; Loop < DIO_NUM_OF_CHANNELS; Loop++)
  e8:	3f 5f       	subi	r19, 0xFF	; 255
  ea:	39 30       	cpi	r19, 0x09	; 9
  ec:	70 f2       	brcs	.-100    	; 0x8a <DIO_Init+0x8>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <DIO_Init+0x72>

         }
         else
         {
             /*invalid port*/
             Result = DIO_NOK;
  f2:	81 e0       	ldi	r24, 0x01	; 1
             break;
         }
     }
     return Result;
 }
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <DIO_ChannelWrite>:
	unsigned char PortId;
	unsigned char PortMask;
	unsigned char ShiftedData;
	
	/*verify channel Id*/
	if(ChannelId < DIO_NUM_OF_CHANNELS)
  fa:	89 30       	cpi	r24, 0x09	; 9
  fc:	60 f5       	brcc	.+88     	; 0x156 <DIO_ChannelWrite+0x5c>
	{
		/*read the port Id for the given channel Id*/
		PortId= DIO_ConfigParam[ChannelId].PortId;
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	ec 59       	subi	r30, 0x9C	; 156
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	e0 81       	ld	r30, Z
		/*verify Port Id*/
		if (PortId < NUM_OF_PORTS)
 112:	e4 30       	cpi	r30, 0x04	; 4
 114:	10 f5       	brcc	.+68     	; 0x15a <DIO_ChannelWrite+0x60>
		{
			/*read the port mask for the given channel Id*/
			PortMask= DIO_ConfigParam[ChannelId].PortMask;
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	d9 01       	movw	r26, r18
 120:	ac 59       	subi	r26, 0x9C	; 156
 122:	bf 4f       	sbci	r27, 0xFF	; 255
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	9c 91       	ld	r25, X
			/*Make sure that channel Id is between 0 and 7*/
			ChannelId = ChannelId % 8;
 128:	87 70       	andi	r24, 0x07	; 7
			/*Shift data value to the target pin*/
			ShiftedData = SHIFT(Data, ChannelId);
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_ChannelWrite+0x38>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_ChannelWrite+0x34>
			/*mask the port to write the data value only on the target pin*/
			PORT_REG(PortId) &= ~(PortMask);
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	e0 81       	ld	r30, Z
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	29 2f       	mov	r18, r25
 144:	20 95       	com	r18
 146:	82 23       	and	r24, r18
 148:	80 83       	st	Z, r24
			/*write the data value on the target pin*/
			PORT_REG(PortId) |= ShiftedData & PortMask;
 14a:	80 81       	ld	r24, Z
 14c:	69 23       	and	r22, r25
 14e:	68 2b       	or	r22, r24
 150:	60 83       	st	Z, r22
			Result= DIO_OK;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
	 
	}
	else
	{
		/*invalid channel Id*/
		Result = DIO_NOK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
			Result= DIO_OK;
		}
		else
		{
            /*invalid port*/
            Result = DIO_NOK;			
 15a:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*invalid channel Id*/
		Result = DIO_NOK;
	}
	return Result; 
}
 15c:	08 95       	ret

0000015e <DISP_WriteData>:
1- To validate the Display ID
2- To validate that data doesn't exceed the maximum BCD value
3- To convert from Decimal to BCD format
4- To use the DIO write function to write each pin data based on the configuration*/
DISP_CheckType DISP_WriteData(unsigned char DispId, unsigned char Data)
{
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	d8 2f       	mov	r29, r24
 166:	16 2f       	mov	r17, r22
	DISP_CheckType Result;
	unsigned char ChannelId;
	unsigned char BcdData;
	
	/*verify Display Id and that data doesn't exceed the maximum BCD value*/
	if(DispId < DISP_NUM_OF_DISPLAYS || Data < MAX_BCD_VALUE)
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	28 f1       	brcs	.+74     	; 0x1b6 <DISP_WriteData+0x58>
 16c:	69 30       	cpi	r22, 0x09	; 9
 16e:	28 f1       	brcs	.+74     	; 0x1ba <DISP_WriteData+0x5c>
		}
	}
	else
	{	
		/*invalid Display Id*/
		Result = DISP_NOK;
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	26 c0       	rjmp	.+76     	; 0x1c0 <DISP_WriteData+0x62>
	/*verify Display Id and that data doesn't exceed the maximum BCD value*/
	if(DispId < DISP_NUM_OF_DISPLAYS || Data < MAX_BCD_VALUE)
	{
		for(Loop = (unsigned char)0; Loop < 7; Loop++)
		{
			ChannelId = DISP_ConfigParam[DispId].DataPinsChannel[Loop];
 174:	ed 2f       	mov	r30, r29
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 56       	subi	r30, 0x6E	; 110
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	ec 0f       	add	r30, r28
 18a:	f1 1d       	adc	r31, r1
			/*convert from Decimal to BCD format*/
			BcdData = GET_BIT( BcdTo7SegmentFormat[Data] , Loop);
 18c:	a1 2f       	mov	r26, r17
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	a8 57       	subi	r26, 0x78	; 120
 192:	bf 4f       	sbci	r27, 0xFF	; 255
 194:	6c 91       	ld	r22, X
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0c 2e       	mov	r0, r28
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DISP_WriteData+0x42>
 19c:	75 95       	asr	r23
 19e:	67 95       	ror	r22
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DISP_WriteData+0x3e>
 1a4:	61 70       	andi	r22, 0x01	; 1
			/*use the DIO write function to write each pin data based on the configuration*/
			Result = DIO_ChannelWrite(ChannelId , BcdData);
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ChannelWrite>
 1ac:	98 2f       	mov	r25, r24
			
			if (Result == DIO_NOK)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <DISP_WriteData+0x62>
	unsigned char BcdData;
	
	/*verify Display Id and that data doesn't exceed the maximum BCD value*/
	if(DispId < DISP_NUM_OF_DISPLAYS || Data < MAX_BCD_VALUE)
	{
		for(Loop = (unsigned char)0; Loop < 7; Loop++)
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <DISP_WriteData+0x5e>
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <DISP_WriteData+0x5e>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	c7 30       	cpi	r28, 0x07	; 7
 1be:	d0 f2       	brcs	.-76     	; 0x174 <DISP_WriteData+0x16>
	{	
		/*invalid Display Id*/
		Result = DISP_NOK;
	}
	return Result;
}
 1c0:	89 2f       	mov	r24, r25
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <DISP_Enable>:
2- To use the DIO write function to write 0 to the Disp enable pin*/
DISP_CheckType DISP_Enable(unsigned char DispId)
{
	DISP_CheckType Result;
	/*verify Display Id*/
	if(DispId < DISP_NUM_OF_DISPLAYS)
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	78 f4       	brcc	.+30     	; 0x1ec <DISP_Enable+0x22>
	{
		Result = DIO_ChannelWrite(DISP_ConfigParam[DispId].EnablePinChannel , 0);	
 1ce:	e8 2f       	mov	r30, r24
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	ee 56       	subi	r30, 0x6E	; 110
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ChannelWrite>
 1ea:	08 95       	ret
	}
	else
	{
		/*invalid Display Id*/
		Result= DISP_NOK;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Result;
}
 1ee:	08 95       	ret

000001f0 <DISP_Disable>:
2- To use the DIO write function to write 1 to the Disp enable pin*/
DISP_CheckType DISP_Disable(unsigned char DispId)
{
   	DISP_CheckType Result;
	/*verify Display Id*/
   	if(DispId < DISP_NUM_OF_DISPLAYS)
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	78 f4       	brcc	.+30     	; 0x212 <DISP_Disable+0x22>
   	{
		Result =	DIO_ChannelWrite(DISP_ConfigParam[DispId].EnablePinChannel , 1);
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 56       	subi	r30, 0x6E	; 110
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ChannelWrite>
 210:	08 95       	ret
   	}
   	else
   	{
		/*invalid Display Id*/
	   	Result= DISP_NOK;
 212:	81 e0       	ldi	r24, 0x01	; 1
   	}
	return Result;
}
 214:	08 95       	ret

00000216 <main>:
{
    unsigned char num;
    unsigned char Temp;
    unsigned char loop;

    DIO_Init();
 216:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Init>

    while (1)
    {
        for (num = 0; num < MAX_COUNT; num++)
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	39 c0       	rjmp	.+114    	; 0x290 <main+0x7a>
        {
            for (loop = (unsigned char)0; loop < DELAY_COUNT; loop++)
            {
                Temp = num % DECIMAL_BASE;
 21e:	cd ec       	ldi	r28, 0xCD	; 205
 220:	0c 9f       	mul	r16, r28
 222:	c1 2d       	mov	r28, r1
 224:	11 24       	eor	r1, r1
 226:	dc 2f       	mov	r29, r28
 228:	d6 95       	lsr	r29
 22a:	d6 95       	lsr	r29
 22c:	d6 95       	lsr	r29
 22e:	dd 0f       	add	r29, r29
 230:	8d 2f       	mov	r24, r29
 232:	88 0f       	add	r24, r24
 234:	88 0f       	add	r24, r24
 236:	d8 0f       	add	r29, r24
 238:	80 2f       	mov	r24, r16
 23a:	8d 1b       	sub	r24, r29
 23c:	d8 2f       	mov	r29, r24
                DISP_Disable(1);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DISP_Disable>
                DISP_WriteData(0, Temp);
 244:	6d 2f       	mov	r22, r29
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 af 00 	call	0x15e	; 0x15e <DISP_WriteData>
                DISP_Enable(0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DISP_Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9c e9       	ldi	r25, 0x9C	; 156
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x40>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x46>
 25c:	00 00       	nop
                _delay_ms(10);
                Temp = num / DECIMAL_BASE;
 25e:	c6 95       	lsr	r28
 260:	c6 95       	lsr	r28
 262:	c6 95       	lsr	r28
                DISP_Disable(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DISP_Disable>
                DISP_WriteData(1, Temp);
 26a:	6c 2f       	mov	r22, r28
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 af 00 	call	0x15e	; 0x15e <DISP_WriteData>
                DISP_Enable(1);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DISP_Enable>
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	9c e9       	ldi	r25, 0x9C	; 156
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x66>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x6c>
 282:	00 00       	nop

    while (1)
    {
        for (num = 0; num < MAX_COUNT; num++)
        {
            for (loop = (unsigned char)0; loop < DELAY_COUNT; loop++)
 284:	1f 5f       	subi	r17, 0xFF	; 255
 286:	01 c0       	rjmp	.+2      	; 0x28a <main+0x74>
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	14 36       	cpi	r17, 0x64	; 100
 28c:	40 f2       	brcs	.-112    	; 0x21e <main+0x8>

    DIO_Init();

    while (1)
    {
        for (num = 0; num < MAX_COUNT; num++)
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	04 36       	cpi	r16, 0x64	; 100
 292:	d0 f3       	brcs	.-12     	; 0x288 <main+0x72>
 294:	c2 cf       	rjmp	.-124    	; 0x21a <main+0x4>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
